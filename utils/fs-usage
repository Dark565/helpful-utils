#!/usr/bin/env bash

# Copyright (C) 2022 Grzegorz Kocio≈Çek (Dark565)
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <https://www.gnu.org/licenses/>.

shopt -s extglob

function help() {
echo "\
Usage: ${0##*/} [OPTION]... [PATH]
List processes with files open on a filesystem within PATH.

With no PATH specified, treat it as the current working directory.

  -h,--help                        Show this help.
  --color=[always,never,auto]      Choose whether print colors always, never or automatically
                                   (yes if STDOUT is a terminal, no if not).

  -k,--kill=SIGNAL                 Send SIGNAL to each detected process.
                                   Signal is presented by appropiate number or name (eg. SIGTERM or 15)
                                   List of available signals can be displayed with 'kill -l' command;

  -c,--command=COMMAND             Execute COMMAND with the process pid as the argument."
}

function kill_num() {
	kill -n "$1" "$2"
}

function kill_name() {
	kill -s "$1" "$2"
}

function cmd() {
	${SHELL} -c "$1" -a "$2" &
}

function fs_mount_from_path() {
	df --output=target "$1" 2>/dev/null | tail -n 1 &

	# Go around a bug with a few block devices.
	# When df tries to read file system from them, kernel sleeps it for the eternity
	T_PID=$(jobs -p)
	if grep 'sleeping' /proc/${T_PID}/status >/dev/null 2>&1
	then
		kill $T_PID
		return 1
	fi
		
}

function resolve_fd_flags() {
	local info_array flags
	readarray -n2 info_array <"$1"
	flags=${info_array[1]#*:}
	case $((${flags} & 0x3)) in
		2 ) RESOLVED_FLAGS="r+w";;
		1 ) RESOLVED_FLAGS="w  ";;
		0 ) RESOLVED_FLAGS="r  ";;
	esac
}

function print_pid_info() {
	[[ -z ${FOUND} ]] || return 1
	FOUND=1

	local USERID="$(stat -c %u "/proc/${PID}")"
	local USERNAME="$(id -un "${USERID}")"

	echo -en "\n---  ${GREEN}${USERNAME} [${USERID}]${NOCOLOR}  ---\n"
	echo -en "${GREEN}${PID}${NOCOLOR} ( $(readlink "/proc/${PID}/exe") )\n"

	if [[ $KILL == 1 ]]; then
		${KILL_FUNC} "${ARG_CMD}" "${PID}"

	elif [[ $CMD == 1 ]]; then
		cmd "${ARG_CMD}" "${PID}"
	fi


}

# Try to read link with builtin functions.
# If they will fail, try to call an external program.
read_link() {
	local link=$1
	if cd -P "${link}" 2>/dev/null; then
		READ_LINK="${PWD}"
		cd - >/dev/null
	elif ! READ_LINK=$(readlink -f "${link}"); then
		return 1
	fi
}

check_fs() {
	local directory=$1
	local check_for=$2

	[[ $(fs_mount_from_path "${directory}") == ${check_for} ]]
}

check_fs_from_link() {
	local link=$1
	local check_for=$2

	read_link "${link}"
	check_fs "${READ_LINK}" "${check_for}"
}

# If tty, turn on colors, otherwise turn off

GREEN="\e[1;32m"
RED="\e[1;31m"
ORANGE="\e[1;33m"
NOCOLOR="\e[0m" 

get_long_opt() {
	arg2=${1#*=}
	if [ "$arg2" = "$1" ]; then
		arg2=$2
		return 0
	fi
	return 1
}

get_short_opt() {
	arg2=${1:2}
	if [ -z "$arg2" ]; then
		arg2=$2
		return 0
	fi
	return 1
}

get_short_or_long_opt() {
	if [ "${1:0:2}" == "--" ]; then
		get_long_opt "$@"
	else
		get_short_opt "$@"
	fi
}

zero_colors() {
	GREEN=
	RED=
	ORANGE=
	NOCOLOR=
}


# Check arguments
while [[ -n $1 ]]; do
	case $1 in
		-h* | --help?(=*) )
			help
			exit 0
			;;
		-k* | --kill?(=*) )
			get_short_or_long_opt "$@" && shift

			KILL=1
			ARG_CMD=$arg2

			if [[ $arg2 =~ ^[0-9]+$ ]]
			then
				KILL_FUNC=kill_num
			else
				KILL_FUNC=kill_name
			fi
			;;
		--color?(=*) )
			get_long_opt "$@" && shift
			
			case $arg2 in
				auto )
					;;
				always )
					COLOR_FLAG_SPECIFIED=1
					;;
				never )
					zero_colors
					COLOR_FLAG_SPECIFIED=1
					;;
				* )
					echo "-- Invalid color mode --" >&2
					help
					exit 1
					;;
			esac
			;;
		-c* | --command?(=*) )
			get_short_or_long_opt "$@" && shift

			CMD=1
			ARG_CMD=$arg2
			;;
		-* )
			echo "-- Invalid flag --" >&2
			help
			exit 1
			;;
		* )
			break
			;;
	esac
	shift 1
done

if [[ -z $COLOR_FLAG_SPECIFIED ]]; then
	tty -s <&1 || zero_colors
fi

START_FS=${1:-.} #FS argument
# Get file system's mount point from the argument
FS_PATH="$(fs_mount_from_path "${START_FS}")"
if [[ ! $? -eq 0 ]]
then
	echo "$(basename $0): Error with reading file system from file" 1>&2
	exit 1
fi

# Get all processes using the file system and iterate through them
for PID in $(fuser -m "${FS_PATH}" 2>/dev/null)
do
	cd "/proc/${PID}" 2>/dev/null || continue

	if check_fs_from_link cwd "${FS_PATH}" 2>/dev/null; then
		print_pid_info
		echo -en "${RED}->      [pwd] ${NOCOLOR}${READ_LINK}\n"
	fi

	cd fd 2>/dev/null || continue
	ls | while read -r LINK
	do
		if check_fs_from_link ${LINK} "${FS_PATH}" 2>/dev/null; then
			print_pid_info
			resolve_fd_flags "../fdinfo/${LINK}"
			printf -- "${RED}-> ${ORANGE}%-3s${RED}  [${LINK}] ${NOCOLOR}${READ_LINK}\n" "${RESOLVED_FLAGS}"
		fi
	done

	unset FOUND
done
