#!/usr/bin/env bash

# Copyright (C) 2020-2022 Grzegorz Kociołek (Dark565)
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <https://www.gnu.org/licenses/>.

# A script printing info about utilization of the default route interface

export LC_ALL=C

DEFAULT_DELAY=1

read -r -d '\0' USAGE_STR <<EOF
Usage: $0 [-hwp] [-i IFACE] [-d DELAY]
Show utilization statistics for an interface.

Options:
  -h, --help             Show this help text;
  -w, --wired            Don't treat an interface as wireless;
  -p, --polybar          Format the output with special hypertext intended for Polybar;
  -i, --interface IFACE  Select an interface (default: \`default' route's interface);
  -d, --delay DELAY      Delay in seconds between counting (default: $DEFAULT_DELAY);

It is possible to select multiple interfaces for the \`-i' option using the IFACE0:IFACE1... syntax.
In this case, statistics for them are summed and the IFACE0:IFACE1... pattern is used as the interface name.
This behavior is also assumed by default if the \`default' route is found to be
nexthop-ped (backed by multiple gateways).
EOF

warn() {
	echo "$0: $*" >&2
}

die() {
	warn "$*"
	exit 1
}

# Fast method of dividing a number by 10 - doesn't need an external program.
div10() {

	local number="$1"
	local div10="$2"
	local precision="$3"
	if [ $number == 0 ]; then
		printf 0
		return 0
	fi
	if [[ $number -lt 0 ]]; then
		((number=-number))
		printf "-"
	fi
	if [ ${#number} -gt "$div10" ]; then
		local second_part="${number:${#number}-div10:precision}"
		printf "${number:0:$((${#number}-div10))}"
		[ -z ${second_part#0*} ] && return 0
		printf ".${second_part}"
	else
		printf "0"
		if [ $precision -gt 0 ]; then
			local zeros_count=$((div10-${#number}))
			[[ $zeros_count -ge $precision ]] && return 0

			printf "."
			if [ $zeros_count -gt 0 ]; then
				for i in {1..$zeros_count}; do
					printf "0"
				done
			fi
			printf "${number:0:precision-zeros_count}"
		fi
	fi
}

div10_fixed() {
	local num=$(div10 "$@")
	[[ $num == '-0' ]] && printf "0" || printf "$num"
}

div10_allow_positive() {
	local number="$1"
	[[ $number -lt 0 ]] && { printf "0"; return 1; }
	div10 "$@"
}

# Print byte count in human readable format
human_readable_size_conv() {

	local number="$1"
	local precision="$2"
	local force_size="$3"

	if [[ 	$number -ge 1000000000000 && -z $force_size || $force_size == 'tb' ]]; then
		div10 "$number" 12 "$precision"
		printf " TB"
	elif [[ $number -ge 1000000000 	  && -z $force_size || $force_size == 'gb' ]]; then
		div10 "$number" 9 "$precision"
		printf " GB"
	elif [[ $number -ge 1000000 	  && -z $force_size || $force_size == 'mb' ]]; then
		div10 "$number" 6 "$precision"
		printf " MB"
	elif [[ $number -ge 1000 	  && -z $force_size || $force_size == 'kb' ]]; then
		div10 "$number" 3 "$precision"
		printf " KB"
	else
		printf "$number B"
	fi
}

route_get_nics() {
	ip route show "$1" \
		| grep '\sdev\s\+\w\+' \
		| sed 's/.*\sdev\s\+\(\w\+\).*/\1/' \
		| sed -z 's/\n\(.\)/:\1/g'
}

# in:
#  global IFACE_ARR: array
# returns:
#  0: success
#  1: error
#  2: no interface
check_nics() {
	local iface
	#eval local tmp="(\"\${$1[@]}\")"
	#test -z "$tmp" && return 2
	test -z "$IFACE_ARR" && return 2

	for iface in "${IFACE_ARR[@]}"; do
		if ! test -r "/sys/class/net/$iface/statistics"; then
			warn "$iface: invalid interface"
			return 1
		fi
	done

	return 0
}

# in:
#  global IFACE_ARR: array
#  global NO_WIRELESS: int
# out:
#  global WIRELESS_INFO: [string]
# returns:
# 0: true
# 1: false
check_for_wireless() {
	local tmp
	unset WIRELESS_INFO

	test -z "$NO_WIRELESS" && test ${#IFACE_ARR[@]} -eq 1 || return 1
	tmp=$(iw dev "$IFACE" info 2>/dev/null) && WIRELESS_INFO=$tmp
}

# in:
#  global WIRELESS_INFO: string
#  global LB_*: string
# out:
#  global PRINT_NAME: string
# returns:
# 0: true
# 1: false
obtain_wireless_name() {
	local ssid ssid2
	ssid=${WIRELESS_INFO#*$'\n'}
	ssid2=${ssid#*ssid}
	test "$ssid" = "$ssid2" && return 1

	ssid2=${ssid2# }
	ssid2=${ssid2%%$'\n'*}
	PRINT_NAME="${LB_COL_LIGHTBLUE}${ssid2}${LB_COL_WHITE}"
}

# in:
#  global DELAY: int
#  1: string - message
#  [2]: int  - an exit value
status_err() {
	echo "$1"
	sleep "$DELAY"
	exit ${2:-0}
}

# in:
#  global LB_*: string
#  global DELAY: int
#  1: string - a symbol
#  [2]: int  - an exit value
status_conn_err() {
	status_err "${LB_ACTION_RECONNECT}${LB_COL_RED}[$1]${LB_ACTION_END}"
}

traffic_read() {
	local iface
	local rx tx
	RX_TRAFFIC=0
	TX_TRAFFIX=0
	for iface in "${IFACE_ARR[@]}"; do
		read rx </sys/class/net/"$iface"/statistics/rx_bytes
		read tx </sys/class/net/"$iface"/statistics/tx_bytes
		((RX_TRAFFIC+=$rx))
		((TX_TRAFFIX+=$tx))
	done
}

# in:
#  global IFACE_ARR
#  global DELAY
# out:
#  global RX_TRAFFIC: int
#  global TX_TRAFFIC: int
obtain_util() {
	local iface
	local old_rx old_tx rx_delta tx_delta
	traffic_read
	old_rx=$RX_TRAFFIC
	old_tx=$TX_TRAFFIX
	sleep "$DELAY"
	traffic_read

	rx_delta=$(($RX_TRAFFIC-$old_rx))
	tx_delta=$(($TX_TRAFFIX-$old_tx))

	RX_UTIL=$(($rx_delta/$DELAY))
	TX_UTIL=$(($tx_delta/$DELAY))
}

show_util() {
	echo -n "${LB_ACTION_RECONNECT}${LB_ACTION_DISCONNECT}${PRINT_NAME}${LB_ACTION_END}${LB_ACTION_END}"
	echo -n " (↓"
	human_readable_size_conv $RX_UTIL 2
	echo -n "/s | ↑"
	human_readable_size_conv $TX_UTIL 2
	echo "/s)"
}

process() {
	# Get default route interfaces
	: ${IFACE=$(route_get_nics default)}

	IFS=:
	IFACE_ARR=($IFACE)
	unset IFS

	check_nics
	case $? in
		1 ) status_conn_err 'x';;
		2 ) status_conn_err '!';;
	esac

	if check_for_wireless; then
		obtain_wireless_name || status_err "${LB_ACTION_RECONNECT}${LB_COL_RED}[*]${LB_COL_WHITE} ${LB_COL_YELLOW}${IFACE}${LB_ACTION_END}"
	else
		PRINT_NAME="${LB_COL_YELLOW}$IFACE${LB_COL_WHITE}"
	fi

	obtain_util
	show_util
}

usage() {
	echo "$USAGE_STR" >&2
	exit ${1:-1}
}

arg_parse() {
	local delay_regex='[1-9][0-9]*'
	local optstring="hwpi:d:"
	local optstring_long="help,wired,polybar,interface:,delay:"
	local optval

	optval=`getopt -o "$optstring" --long "$optstring_long" -n "$0" -- "$@"` || usage 1
	eval set -- "$optval"

	unset NO_WIRELESS DO_FORMAT IFACE
	DELAY=$DEFAULT_DELAY
	while test -n "$1"; do
		case "$1" in
			-h|--help )
				usage 1
				;;
			-w|--wired )
				NO_WIRELESS=1
				;;
			-p|--polybar )
				DO_FORMAT=1
				;;
			-i|--interface )
				IFACE=${2:-' '}
				shift
				;;
			-d|--delay )
				DELAY=$2
				expr "$DELAY" : "$delay_regex" >/dev/null || die "-d: invalid delay"
				shift
				;;
		esac
		shift
	done

	LB_COL_YELLOW=${DO_FORMAT:+"%{F#ffff63}"}
	LB_COL_RED=${DO_FORMAT:+"%{F#c72121}"}
	LB_COL_LIGHTBLUE=${DO_FORMAT:+"%{F#5bd6de}"}
	LB_COL_WHITE=${DO_FORMAT:+"%{F#FF}"}

	LB_ACTION_RECONNECT=${DO_FORMAT:+"%{A1:$HOME/bin/net-reconnect-sudo:}"}
	LB_ACTION_DISCONNECT=${DO_FORMAT:+"%{A3:$HOME/bin/net-disconnect-sudo:}"}
	LB_ACTION_END=${DO_FORMAT:+"%{A}"}

}

arg_parse "$@"
process
